{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "AppenderModule": {
            "properties": {
                "configure": {
                    "$ref": "#/definitions/Function"
                }
            },
            "type": "object"
        },
        "BaseLayout": {
            "properties": {
                "type": {
                    "enum": [
                        "basic"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CategoryFilterAppender": {
            "description": "Category Filter",
            "properties": {
                "appender": {
                    "type": "string"
                },
                "exclude": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "type": {
                    "enum": [
                        "categoryFilter"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ColoredLayout": {
            "properties": {
                "type": {
                    "enum": [
                        "colored",
                        "coloured"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Configuration": {
            "properties": {
                "appenders": {
                    "additionalProperties": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/CategoryFilterAppender"
                            },
                            {
                                "$ref": "#/definitions/NoLogFilterAppender"
                            },
                            {
                                "$ref": "#/definitions/ConsoleAppender"
                            },
                            {
                                "$ref": "#/definitions/FileAppender"
                            },
                            {
                                "$ref": "#/definitions/SyncfileAppender"
                            },
                            {
                                "$ref": "#/definitions/DateFileAppender"
                            },
                            {
                                "$ref": "#/definitions/LogLevelFilterAppender"
                            },
                            {
                                "$ref": "#/definitions/MultiFileAppender"
                            },
                            {
                                "$ref": "#/definitions/MultiprocessAppender"
                            },
                            {
                                "$ref": "#/definitions/RecordingAppender"
                            },
                            {
                                "$ref": "#/definitions/StandardErrorAppender"
                            },
                            {
                                "$ref": "#/definitions/StandardOutputAppender"
                            },
                            {
                                "$ref": "#/definitions/CustomAppender"
                            }
                        ]
                    },
                    "type": "object"
                },
                "categories": {
                    "additionalProperties": {
                        "properties": {
                            "appenders": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "enableCallStack": {
                                "type": "boolean"
                            },
                            "level": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "object"
                },
                "disableClustering": {
                    "type": "boolean"
                },
                "levels": {
                    "$ref": "#/definitions/Levels"
                },
                "pm2": {
                    "type": "boolean"
                },
                "pm2InstanceVar": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ConsoleAppender": {
            "description": "Console Appender",
            "properties": {
                "layout": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/BaseLayout"
                        },
                        {
                            "$ref": "#/definitions/ColoredLayout"
                        },
                        {
                            "$ref": "#/definitions/MessagePassThroughLayout"
                        },
                        {
                            "$ref": "#/definitions/DummyLayout"
                        },
                        {
                            "$ref": "#/definitions/PatternLayout"
                        },
                        {
                            "$ref": "#/definitions/CustomLayout"
                        }
                    ]
                },
                "type": {
                    "enum": [
                        "console"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CustomAppender": {
            "additionalProperties": {
            },
            "properties": {
                "type": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/AppenderModule"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "CustomLayout": {
            "additionalProperties": {
            },
            "properties": {
                "type": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DateFileAppender": {
            "properties": {
                "alwaysIncludePattern": {
                    "type": "boolean"
                },
                "compress": {
                    "type": "boolean"
                },
                "daysToKeep": {
                    "type": "number"
                },
                "encoding": {
                    "type": "string"
                },
                "filename": {
                    "type": "string"
                },
                "flags": {
                    "type": "string"
                },
                "keepFileExt": {
                    "type": "boolean"
                },
                "layout": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/BaseLayout"
                        },
                        {
                            "$ref": "#/definitions/ColoredLayout"
                        },
                        {
                            "$ref": "#/definitions/MessagePassThroughLayout"
                        },
                        {
                            "$ref": "#/definitions/DummyLayout"
                        },
                        {
                            "$ref": "#/definitions/PatternLayout"
                        },
                        {
                            "$ref": "#/definitions/CustomLayout"
                        }
                    ]
                },
                "mode": {
                    "type": "number"
                },
                "pattern": {
                    "description": "The following strings are recognised in the pattern:\n - yyyy : the full year, use yy for just the last two digits\n - MM   : the month\n - dd   : the day of the month\n - hh   : the hour of the day (24-hour clock)\n - mm   : the minute of the hour\n - ss   : seconds\n - SSS  : milliseconds (although I'm not sure you'd want to roll your logs every millisecond)\n - O    : timezone (capital letter o)",
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "dateFile"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DummyLayout": {
            "properties": {
                "type": {
                    "enum": [
                        "dummy"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FileAppender": {
            "properties": {
                "backups": {
                    "type": "number"
                },
                "compress": {
                    "type": "boolean"
                },
                "encoding": {
                    "type": "string"
                },
                "filename": {
                    "type": "string"
                },
                "flags": {
                    "type": "string"
                },
                "keepFileExt": {
                    "type": "boolean"
                },
                "layout": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/BaseLayout"
                        },
                        {
                            "$ref": "#/definitions/ColoredLayout"
                        },
                        {
                            "$ref": "#/definitions/MessagePassThroughLayout"
                        },
                        {
                            "$ref": "#/definitions/DummyLayout"
                        },
                        {
                            "$ref": "#/definitions/PatternLayout"
                        },
                        {
                            "$ref": "#/definitions/CustomLayout"
                        }
                    ]
                },
                "maxLogSize": {
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "mode": {
                    "type": "number"
                },
                "numBackups": {
                    "type": "number"
                },
                "type": {
                    "enum": [
                        "file"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Function": {
            "description": "Creates a new function.",
            "properties": {
                "arguments": {
                },
                "caller": {
                    "$ref": "#/definitions/Function"
                },
                "length": {
                    "type": "number"
                },
                "name": {
                    "description": "Returns the name of the function. Function names are read-only and can not be changed.",
                    "type": "string"
                },
                "prototype": {
                }
            },
            "type": "object"
        },
        "GitFlowConfig": {
            "description": "Configuration of a git flow instance.",
            "properties": {
                "bugfixBranchPrefix": {
                    "type": "string"
                },
                "developBranch": {
                    "type": "string"
                },
                "featureBranchPrefix": {
                    "type": "string"
                },
                "hotfixBranchPrefix": {
                    "type": "string"
                },
                "masterBranch": {
                    "type": "string"
                },
                "releaseBranchPrefix": {
                    "type": "string"
                },
                "supportBranchPrefix": {
                    "type": "string"
                },
                "versionTagPrefix": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Level": {
            "properties": {
                "colour": {
                    "type": "string"
                },
                "level": {
                    "type": "number"
                },
                "levelStr": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Levels": {
            "properties": {
                "ALL": {
                    "$ref": "#/definitions/Level"
                },
                "DEBUG": {
                    "$ref": "#/definitions/Level"
                },
                "ERROR": {
                    "$ref": "#/definitions/Level"
                },
                "FATAL": {
                    "$ref": "#/definitions/Level"
                },
                "INFO": {
                    "$ref": "#/definitions/Level"
                },
                "MARK": {
                    "$ref": "#/definitions/Level"
                },
                "OFF": {
                    "$ref": "#/definitions/Level"
                },
                "TRACE": {
                    "$ref": "#/definitions/Level"
                },
                "WARN": {
                    "$ref": "#/definitions/Level"
                },
                "levels": {
                    "items": {
                        "$ref": "#/definitions/Level"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "LogLevelFilterAppender": {
            "properties": {
                "appender": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "maxLevel": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "logLevelFilter"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MessagePassThroughLayout": {
            "properties": {
                "type": {
                    "enum": [
                        "messagePassThrough"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MultiFileAppender": {
            "properties": {
                "base": {
                    "type": "string"
                },
                "extension": {
                    "type": "string"
                },
                "property": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "multiFile"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MultiprocessAppender": {
            "properties": {
                "appender": {
                    "type": "string"
                },
                "loggerHost": {
                    "type": "string"
                },
                "loggerPort": {
                    "type": "number"
                },
                "mode": {
                    "enum": [
                        "master",
                        "worker"
                    ],
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "multiprocess"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NoLogFilterAppender": {
            "description": "No Log Filter",
            "properties": {
                "appender": {
                    "type": "string"
                },
                "exclude": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "type": {
                    "enum": [
                        "noLogFilter"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Options": {
            "properties": {
                "commentChar": {
                    "default": null,
                    "description": "What commentChar to use. By default it is `null`, so no comments are stripped.\nSet to `#` if you pass the contents of `.git/COMMIT_EDITMSG` directly.\n\nIf you have configured the git commentchar via git config `core.commentchar`\nyou'll want to pass what you have set there.",
                    "type": [
                        "null",
                        "string"
                    ]
                },
                "fieldPattern": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/RegExp"
                        },
                        {
                            "type": [
                                "null",
                                "string"
                            ]
                        }
                    ],
                    "default": "/^-(.*?)-$/",
                    "description": "Pattern to match other fields."
                },
                "headerCorrespondence": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": [
                                "null",
                                "string"
                            ]
                        }
                    ],
                    "default": "['type', 'scope', 'subject']",
                    "description": "Used to define what capturing group of `headerPattern` captures what header\npart. The order of the array should correspond to the order of\n`headerPattern`'s capturing group. If the part is not captured it is `null`.\nIf it's a `string` it will be converted to an `array` separated by a comma."
                },
                "headerPattern": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/RegExp"
                        },
                        {
                            "type": [
                                "null",
                                "string"
                            ]
                        }
                    ],
                    "default": "/^(\\w*)(?:\\(([\\w\\$\\.\\-\\* ]*)\\))?\\: (.*)$/",
                    "description": "Used to match header pattern."
                },
                "issuePrefixes": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": [
                                "null",
                                "string"
                            ]
                        }
                    ],
                    "default": "['#']",
                    "description": "The prefixes of an issue. EG: In `gh-123` `gh-` is the prefix."
                },
                "issuePrefixesCaseSensitive": {
                    "default": false,
                    "description": "Used to define if `issuePrefixes` should be considered case sensitive.",
                    "type": "boolean"
                },
                "mergeCorrespondence": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": [
                                "null",
                                "string"
                            ]
                        }
                    ],
                    "default": null,
                    "description": "Used to define what capturing group of `mergePattern`.\n\nIf it's a `string` it will be converted to an `array` separated by a comma."
                },
                "mergePattern": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/RegExp"
                        },
                        {
                            "type": [
                                "null",
                                "string"
                            ]
                        }
                    ],
                    "default": null,
                    "description": "Pattern to match merge headers. EG: branch merge, GitHub or GitLab like pull\nrequests headers. When a merge header is parsed, the next line is used for\nconventional header parsing.\n\nFor example, if we have a commit\n\n```text\nMerge pull request #1 from user/feature/feature-name\n\nfeat(scope): broadcast $destroy event on scope destruction\n```\n\nWe can parse it with these options and the default headerPattern:\n\n```javascript\n{\n mergePattern: /^Merge pull request #(\\d+) from (.*)$/,\n mergeCorrespondence: ['id', 'source']\n}\n```"
                },
                "noteKeywords": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": [
                                "null",
                                "string"
                            ]
                        }
                    ],
                    "default": "['BREAKING CHANGE']",
                    "description": "Keywords for important notes. This value is case __insensitive__. If it's a\n`string` it will be converted to an `array` separated by a comma."
                },
                "referenceActions": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": [
                                "null",
                                "string"
                            ]
                        }
                    ],
                    "default": "['close', 'closes', 'closed', 'fix', 'fixes', 'fixed', 'resolve', 'resolves', 'resolved']",
                    "description": "Keywords to reference an issue. This value is case __insensitive__. If it's a\n`string` it will be converted to an `array` separated by a comma.\n\nSet it to `null` to reference an issue without any action."
                },
                "revertCorrespondence": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": [
                                "null",
                                "string"
                            ]
                        }
                    ],
                    "default": "['header', 'hash']",
                    "description": "Used to define what capturing group of `revertPattern` captures what reverted\ncommit fields. The order of the array should correspond to the order of\n`revertPattern`'s capturing group.\n\nFor example, if we had commit\n\n```\nRevert \"throw an error if a callback is passed\"\n\nThis reverts commit 9bb4d6c.\n```\n\nIf configured correctly, the parsed result would be\n\n```\n{\n revert: {\n   header: 'throw an error if a callback is passed',\n   hash: '9bb4d6c'\n }\n}\n```\n\nIt implies that this commit reverts a commit with header `'throw an error if\na callback is passed'` and hash `'9bb4d6c'`.\n\nIf it's a `string` it will be converted to an `array` separated by a comma."
                },
                "revertPattern": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/RegExp"
                        },
                        {
                            "type": [
                                "null",
                                "string"
                            ]
                        }
                    ],
                    "default": "/^Revert\\s\"([\\s\\S]*)\"\\s*This reverts commit (\\w*)\\./",
                    "description": "Pattern to match what this commit reverts."
                },
                "warn": {
                    "default": "function () {}",
                    "description": "What warn function to use. For example, `console.warn.bind(console)` or\n`grunt.log.writeln`. By default, it's a noop. If it is `true`, it will error\nif commit cannot be parsed (strict).",
                    "type": [
                        "object",
                        "boolean"
                    ]
                }
            },
            "type": "object"
        },
        "PatternLayout": {
            "properties": {
                "pattern": {
                    "type": "string"
                },
                "tokens": {
                    "additionalProperties": {
                        "type": [
                            "string",
                            "object"
                        ]
                    },
                    "type": "object"
                },
                "type": {
                    "enum": [
                        "pattern"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ProjectConfig": {
            "description": "Options of the git flow node project.",
            "properties": {
                "autoStash": {
                    "description": "Auto stashes the uncommited changes on starting a git flow branch.\nAfter the git flow branch was created, the latest stash is popped.\n*DEFAULTS*: true",
                    "type": "boolean"
                },
                "bumpVersionFiles": {
                    "description": "Specifies the JSON files containing a version attribute to be overwritten if the version changes.\n*DEFAULTS*: 'package.json' and 'package-lock.json'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "changelog": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Record<string,unknown>"
                        },
                        {
                            "properties": {
                                "type": {
                                    "description": "The type of the changelog.\nThis option indicates which type of changelog should be parsed and generated.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "description": "Sets the configuration of the changelog.\n\n*DEFAULTS*:\n```JSON\n{\n   \"type\": \"ConventionalChangelog\",\n   \"changelogFileName\": \"CHANGELOG.md\",\n   \"storeLatestChangelog\": false,\n   \"conventionalChangelogPresent\": \"angular\"\n}\n```"
                },
                "changelogFileName": {
                    "description": "Specifies the name of the changelog.\n*DEFAULTS*: CHANGELOG.md",
                    "type": "string"
                },
                "conventionalChangelogPresent": {
                    "description": "Specifies the conventional commit format.\nThe selectable options are:\n- angular (default)\n- atom\n- ember\n- eslint\n- jquery\n- jshint\n\nFor more infomation check out the documentation of the\n[conventional-changelog-preset-loader](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-preset-loader).\nThis loader is used to load the corresponding present.",
                    "type": "string"
                },
                "conventionalCommit": {
                    "$ref": "#/definitions/Options",
                    "description": "Sets the conventional commit [options of conventional-commits-parser](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-commits-parser#options)\n\nAdditional *DEFAULTS*:\n```JSON\n {\n   \"referenceActions\": [\n     \"close\",\n     \"closes\",\n     \"closed\",\n     \"fix\",\n     \"fixes\",\n     \"fixed\",\n     \"resolve\",\n     \"resolves\",\n     \"resolved\",\n     \"refs\",\n     \"references\"\n   ],\n   \"noteKeywords\": [\"BREAKING CHANGE\", \"SECURITY\", \"REMOVED\"]\n }\n```"
                },
                "projectPath": {
                    "description": "Path to the node project folder / git repository.",
                    "type": "string"
                },
                "storeLatestChangelog": {
                    "description": "Set this flag to keep the changelog of the latest release as [[changelogFileName]].latest.md.\nThis file can be useful for some other tools which processes the release information (ex. gitlab).",
                    "type": "boolean"
                },
                "versionFile": {
                    "description": "Specifies the primary version file containing the version of the project.\n*DEFAULTS*: 'package.json'",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Record<string,unknown>": {
            "type": "object"
        },
        "RecordingAppender": {
            "properties": {
                "type": {
                    "enum": [
                        "recording"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RegExp": {
            "properties": {
                "dotAll": {
                    "description": "Returns a Boolean value indicating the state of the dotAll flag (s) used with a regular expression.\nDefault is false. Read-only.",
                    "type": "boolean"
                },
                "flags": {
                    "description": "Returns a string indicating the flags of the regular expression in question. This field is read-only.\nThe characters in this string are sequenced and concatenated in the following order:\n\n   - \"g\" for global\n   - \"i\" for ignoreCase\n   - \"m\" for multiline\n   - \"u\" for unicode\n   - \"y\" for sticky\n\nIf no flags are set, the value is the empty string.",
                    "type": "string"
                },
                "global": {
                    "description": "Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only.",
                    "type": "boolean"
                },
                "ignoreCase": {
                    "description": "Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only.",
                    "type": "boolean"
                },
                "lastIndex": {
                    "type": "number"
                },
                "multiline": {
                    "description": "Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only.",
                    "type": "boolean"
                },
                "source": {
                    "description": "Returns a copy of the text of the regular expression pattern. Read-only. The regExp argument is a Regular expression object. It can be a variable name or a literal.",
                    "type": "string"
                },
                "sticky": {
                    "description": "Returns a Boolean value indicating the state of the sticky flag (y) used with a regular\nexpression. Default is false. Read-only.",
                    "type": "boolean"
                },
                "unicode": {
                    "description": "Returns a Boolean value indicating the state of the Unicode flag (u) used with a regular\nexpression. Default is false. Read-only.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "StandardErrorAppender": {
            "properties": {
                "layout": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/BaseLayout"
                        },
                        {
                            "$ref": "#/definitions/ColoredLayout"
                        },
                        {
                            "$ref": "#/definitions/MessagePassThroughLayout"
                        },
                        {
                            "$ref": "#/definitions/DummyLayout"
                        },
                        {
                            "$ref": "#/definitions/PatternLayout"
                        },
                        {
                            "$ref": "#/definitions/CustomLayout"
                        }
                    ]
                },
                "type": {
                    "enum": [
                        "stderr"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StandardOutputAppender": {
            "properties": {
                "layout": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/BaseLayout"
                        },
                        {
                            "$ref": "#/definitions/ColoredLayout"
                        },
                        {
                            "$ref": "#/definitions/MessagePassThroughLayout"
                        },
                        {
                            "$ref": "#/definitions/DummyLayout"
                        },
                        {
                            "$ref": "#/definitions/PatternLayout"
                        },
                        {
                            "$ref": "#/definitions/CustomLayout"
                        }
                    ]
                },
                "type": {
                    "enum": [
                        "stdout"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SyncfileAppender": {
            "properties": {
                "backups": {
                    "type": "number"
                },
                "filename": {
                    "type": "string"
                },
                "layout": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/BaseLayout"
                        },
                        {
                            "$ref": "#/definitions/ColoredLayout"
                        },
                        {
                            "$ref": "#/definitions/MessagePassThroughLayout"
                        },
                        {
                            "$ref": "#/definitions/DummyLayout"
                        },
                        {
                            "$ref": "#/definitions/PatternLayout"
                        },
                        {
                            "$ref": "#/definitions/CustomLayout"
                        }
                    ]
                },
                "maxLogSize": {
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "type": {
                    "enum": [
                        "fileSync"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "description": "Options of the GFlow implementation.",
    "properties": {
        "gitFlowConfig": {
            "$ref": "#/definitions/GitFlowConfig",
            "description": "The git flow config can be directly set in the GFlow options.\nThis config will be taken if no other git flow config is given on calling the `init` method."
        },
        "log4jsConfig": {
            "$ref": "#/definitions/Configuration",
            "description": "The log4js configuration.\nFor more information see https://log4js-node.github.io/log4js-node/api.html."
        },
        "projectConfig": {
            "$ref": "#/definitions/ProjectConfig",
            "description": "The configuration of the node project."
        }
    },
    "type": "object"
}

